{"version":3,"sources":["logo.svg","services/countryService.js","pages/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CountryService","processStream","formData","headers","Headers","delete","fetch","process","method","body","then","response","ndjsonStream","exampleStream","getReader","read","result","done","console","log","value","res","getCountryInfo","json","delteAll","Main","props","state","loading","error","deletePressed","file","data","columns","title","dataIndex","key","render","text","status","color","onSubmitProcess","zipname","setState","message","evtSource","onmessage","e","JSON","parse","onFormSubmit","preventDefault","FormData","append","onChange","target","files","onDelete","onFinish","values","fetchCont","EventSource","this","eventSource","table","type","dataSource","onSubmit","name","onClick","style","marginTop","marginRight","DeleteTwoTone","twoToneColor","LoadingOutlined","fontSize","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.96ae4c08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import ndjsonStream from 'can-ndjson-stream';\n\n\nconst CountryService  = {\n\n\nprocessStream : (formData)=>{\n \n    let headers = new Headers();\n    headers = headers.delete('Content-Type')\n    const PROCESS_URL = process.env.REACT_APP_BASE_URL  + 'process';\n\nfetch(PROCESS_URL,{\n    method: 'post',\n    body: formData,\n    headers : headers\n})  // make a fetch request to a NDJSON stream service\n.then((response) => {\n\treturn ndjsonStream(response.body); //ndjsonStream parses the response.body\n\n}).then((exampleStream) => {\n\tlet read;\n\texampleStream.getReader().read().then((result) => {\n\t\tif (result.done) return;\n        console.log(result.value);\n        exampleStream.getReader().read().then(result); //recurse through the stream\n\t});\n});\n},\n\n process : (formData)=>{\n    let headers = new Headers();\n    headers = headers.delete('Content-Type')\n    const PROCESS_URL = process.env.REACT_APP_BASE_URL  + 'process';\n    return fetch(PROCESS_URL, {\n        method: 'post',\n        body: formData,\n        headers : {}\n    }).then(res => {console.log('done')});\n},\n\ngetCountryInfo : () => {\n    const GETCOUNTY = 'getAllCountyInfo'\n    return fetch(process.env.REACT_APP_BASE_URL + GETCOUNTY)\n    .then(response =>  response.json());\n},\n\ndelteAll : () => {\n    const DELETEALL = 'deleteAll'\n    return fetch(process.env.REACT_APP_BASE_URL + DELETEALL);\n}\n\n\n}\nexport default CountryService;","import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Row, Col, Layout, Alert,Table, Tag } from 'antd';\nimport {\n  DeleteTwoTone,\n    LoadingOutlined,\n  } from '@ant-design/icons';\n\nimport CountryService from '../services/countryService';\nimport axios from 'axios';\n\n\n\n\n\n\nclass Main extends React.Component {\n    \n  \n  constructor(props){\n    super(props);\n    const FIND_URL = process.env.REACT_APP_BASE_URL  + 'findAll';\n    this.evtSource = new EventSource(FIND_URL);\n  }\n\n\n    state = {\n        loading : false,\n        error : false,\n        deletePressed :false,\n        file : \"\",\n        data : []\n    }\n\n  \n    columns = [{\n      title: 'Zip Name',\n      dataIndex: 'zipFileName',\n      key: 'zipFileName',\n      render: text => <a>{text}</a>,\n    },\n    {\n      title: 'Extracted Name',\n      dataIndex: 'extractedFileName',\n      key: 'extractedFileName',\n    },\n    {\n      title: 'File Contnet',\n      dataIndex: 'fileContent',\n      key: 'fileContent',\n    },\n    {\n      title: 'Country',\n      dataIndex: 'countryName',\n      key: 'countryName',\n    },\n    {\n      title: 'Status',\n      key: 'status',\n      dataIndex: 'status',\n      render : status => {\n        let color = \"red\"\n        if(status == \"SUCCESS\"){\n          color = \"green\"\n        }\n        return (\n          <Tag color={color} key={status} > {status} </Tag>\n        )\n      }\n    },\n    {\n      title: 'Date',\n      dataIndex : 'date',\n      key: 'date',\n      \n    },\n  ];\n   \n  \n\n\n\n\n    onSubmitProcess = (zipname)=>{\n      if(this.state.loading == false){\n      this.setState({loading : true})\n        console.log(zipname);\n        CountryService.process(zipname).then(res => {\n          this.setState({loading : false})\n          console.log('response ', res);\n            if(res.message == \"Processed\"){\n              this.setState({error : false})\n            } else {\n            this.setState({error : true})\n            }\n        })\n      }   \n    }\n\n    fetch = () =>{\n      this.evtSource.onmessage = e =>{\n        console.log(JSON.parse(e.data));\n      }\n    }\n\n\n\n     onFormSubmit = (e) =>{\n      e.preventDefault();\n      const formData = new FormData();\n      formData.append('file',this.state.file);\n      this.setState({loading : true});\n      CountryService.process(formData).then( res =>\n        {\n            this.setState({loading : false});\n        }\n      );\n   \n  }\n  onChange = (e) => {\n      this.setState({file:e.target.files[0]});\n  }\n\n\n  componentDidMount(){\n    this.evtSource.onmessage = e =>{\n      this.setState({data :  [...this.state.data, JSON.parse(e.data)]});\n      console.log(e.data);\n    }\n  \n  }\n\n    onDelete = () => {\n      this.setState({deletePressed : true});\n      CountryService.delteAll().then(res => {\n        this.setState({deletePressed : false});\n        console.log('delete', this.state.deletePressed)\n      });\n    }\n    onFinish = values => {\n        console.log('Received values of form: ', values);\n      };\n \n\n      fetchCont = ()=>{\n        \n      }\n\n\n      startEventSource() {\n        this.eventSource = new EventSource(`https://countrytestapi.herokuapp.com/findAll`);\n        this.eventSource.onmessage = e =>{\n          this.setState({data :  [...this.state.data, JSON.parse(e.data)]});\n          console.log(e.data);\n        }\n\n        \n      }\n    \n  \n\n  render() {\n\n\n    //this.fetch();\n\n    console.log('re-rendering');\n    let table = <div></div>\n    if(this.state.error == true){\n      table = <Alert message=\"Sorry! something went wrong\" type=\"error\" />\n    } else {\n      table = <Table columns={this.columns} dataSource={this.state.data} />\n    }\n\n    return (\n        <div >\n           <form onSubmit={this.onFormSubmit}>\n                <h1>Country Process</h1>\n                <input type=\"file\" name=\"myImage\" onChange= {this.onChange} />\n                <button type=\"submit\">Process</button>\n            </form>   <Button onClick={this.onDelete} style={{marginTop : '20px', marginRight: '2px'}} > <DeleteTwoTone twoToneColor=\"#eb2f96\" /> </Button>\n    <div style = {{marginTop : '20px'}}>\n        <br></br>\n      \n      {this.state.loading == true \n        ? <LoadingOutlined style={{ fontSize: '48px',color: '#08c'}} /> \n        : table}\n    \n    </div>\n      </div>\n\n    )\n  }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './pages/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}